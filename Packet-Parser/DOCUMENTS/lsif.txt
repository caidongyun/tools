/*
 * Updated code to obtain IP and MAC address for all "up" network
 * interfaces on a linux system. Now IPv6 friendly and updated to use
 * inet_ntop instead of the deprecated inet_ntoa function. This version
 * should not seg fault on newer linux systems
 *
 * Version 2.0
 *
 * Authors: 
 *   Adam Pierce
 *   Adam Risi
 *   William Schaub
 *
 * Date: 11/11/2009
 * http://www.adamrisi.com
 * http://www.doctort.org/adam/
 * http://teotwawki.steubentech.com/
 *
 */
 
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/ioctl.h>
#if __MACH__ || __NetBSD__ || __OpenBSD__ || __FreeBSD__
#include <sys/sysctl.h>
#endif
/* Include sockio.h if needed */
#ifndef SIOCGIFCONF
#include <sys/sockio.h>
#endif
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#if __MACH__
#include <net/if_dl.h>
#endif

/* On platforms that have variable length 
   ifreq use the old fixed length interface instead */
#ifdef OSIOCGIFCONF
#undef SIOCGIFCONF
#define SIOCGIFCONF OSIOCGIFCONF
#undef SIOCGIFADDR
#define SIOCGIFADDR OSIOCGIFADDR
#undef SIOCGIFBRDADDR
#define SIOCGIFBRDADDR OSIOCGIFBRDADDR
#endif

#define fatal_perror(X) do { perror(X), exit(1); } while(0)
 
/* 
 * this is straight from beej's network tutorial. It is a nice wrapper
 * for inet_ntop and helpes to make the program IPv6 ready
 */
char *get_ip_str(const struct sockaddr *sa, char *s, size_t maxlen)
{
  switch(sa->sa_family) {
  case AF_INET:
    inet_ntop(AF_INET, &(((struct sockaddr_in *)sa)->sin_addr),
              s, maxlen);
    break;
 
  case AF_INET6:
    inet_ntop(AF_INET6, &(((struct sockaddr_in6 *)sa)->sin6_addr),
              s, maxlen);
    break;
 
  default:
    strncpy(s, "Unknown AF", maxlen);
    return NULL;
  }
 
  return s;
}
 
int main(void)
{
  char            buf[8192] = {0};

  /*  ioctl() calls are used to configure network devices, these calls need
   *  the information which is passed to the calls using the ifconf and ifreq
   *  structures. These structures can be used with any type of sockets
   *  regardless of family, type and protocol etc */
  /* sys/ioctl.h, net/if.h */
  /* struct ifconf {
       int ifc_len; //Size of buffer 
       union {
             char *ifc_buf; //buffer address
	     struct ifreq* ifc_req; //array of structures
       }; 
     } */
       
  struct ifconf   ifc = {0};
  struct ifreq   *ifr = NULL; /* If we need this structure of structures then
  probably we use directly this structure, but the efficiency in using struct
  ifconf in all situations is that you've only one interface to deal with and
  then you've the ifc_len*/

  int             sck = 0;
  int             nInterfaces = 0;
  int             i = 0;
  char            ip[INET6_ADDRSTRLEN] = {0};
  struct ifreq    *item;
  struct sockaddr *addr;
  socklen_t       salen;
  char            hostname[NI_MAXHOST];

  /* Get a socket handle. */
  /* This should be replaced by socket(PF_PACKET, SOCK_DGRAM, protocol)=(FAMILY, TYPE, PROTOCOL) and the main difference is new sockaddr_ll address structure for generic link layer information instead of sockaddr_pkt */
  sck = socket(PF_INET, SOCK_DGRAM, 0);
  if(sck < 0) {
    fatal_perror("socket");
    return 1;
  }
 
  /* Query available interfaces. SIOCGIFCONF, returns a list of
   * interface(transport layer) addresses. This currently means only addresses
   * of AF_INET(IPv4) family for compatibility for compatibility. The user
   * passes a "struct ifconf" structure as an argument the ioctl(). It
   * contains a pointer a pointer to an array of ifreq structures in ifc_req
   * and its length in bytes in in ifc_len. The kernel fills the ifreqs with
   * all L3(network layer) addresses.ifreq::ifr_name contains the interface
   * name(eth0:1 etc) and ifreq::ifr_addr the address.
   Return value: The kernel returns with the actual length in ifc_len(The
   number of ifreqs*sizeof(ifreq). If error occures then ioctl() returns -1
   otherwise 0, the overflow is not an error. If ifc_len is equal to the
   original length the buffer probably has overflowed and you should retry
   with a bigger buffer to all addresses 
   STRICLTY SPEAKING... SIOCGIFCONF and other ioctl()s that only accept or
   return AF_INET socket addresses, are IP specific and belongs in IP(7). The
   name of the interfaces with no addresses or that don't have the IFF_RUNNING
   flag set can be found via /proc/net/dev 
   NOTES SPECIFIC TO IPV6 local IPv6 addresses can be found via /proc/net or
   via rtnetlink(7) 
   BUGS, glibc 2.1 is missing ifr_newname macro in <net/if.h>. Add the
   following to your program as a workarounud 
   #ifndef ifr_newname 
   #define ifr_newname ifr_ifru.ifru_slave 
   #endif */

  /* struct ifconf::ifc_len = */
  ifc.ifc_len = sizeof(buf);
  /* struct ifconf::ifc_buf instead of struct ifconf::ifreq */
  ifc.ifc_buf = buf; /* We are in a union, the ioctl checks both ifc_buf and
  ifc_req probably the documentation says here we should've ifc_req but
  instead we've ifc_buf so evidently both are good */
  if(ioctl(sck, SIOCGIFCONF, &ifc) < 0) {
    fatal_perror("ioctl(SIOCGIFCONF)");
    return 1;
  }
  /* Iterate through the list of interfaces. */
  ifr = ifc.ifc_req; /* struct ifreq* ifr, but what we got back is in struct ifconf::ifc_req and
  not in struct ifconf::ifc_buf evidently */
  nInterfaces = ifc.ifc_len / sizeof(struct ifreq); // Simple each ifreq is a
  single interface
  for(i = 0; i < nInterfaces; i++) {
    bzero(hostname, NI_MAXHOST);
    item = &ifr[i]; /*struct ifreq* item*/

    /* struct sockaddr for AF_INET and AF_INET6 is same to some extent and
     * then AF_INET6 is extended to accomodate the what ever is new in IP6 */
    
    /* Show the device name and IP address */
    addr = &(item->ifr_addr); /* Where as each item is a pointer to struct
    ifreq, struct sockaddr* addr */

    /* socket(Family(AF_INET | AF_INET6), TYPE(RAW | DATAGRAM |
     * CONNECTION_BASED), protocol(Actaul transport layer protocol)) */
    switch(addr->sa_family) {
    case AF_INET:
      salen = sizeof(struct sockaddr_in); /* We are getting the sockaddr len */
      break;
    case AF_INET6:
      salen = sizeof(struct sockaddr_in6); /* Hence the size of sockaddr for
      ipv4 and ipv6 is different and we need this different address sizes */
      break;
    default:
      salen = 0;
    }
   
    /* the call to get the mac address changes what is stored in the
       item, meaning that we need to determine the hostname now */
    /* @addr, has type struct sockaddr* and has the input IP address,
       @salen, socklen_t, has the size of the structure which holds the input
       IP address */
    /* @host, pointer and caller allocated buffer in which the hostname is places */
    /* @hostlen, the length of the above mentioned buffer in which the null
     * terminated host name is placed */
    /* @serv, pointer and called allocated buffer in which services names are
     * placed */
    /* @servlen, the length of the above mentioned buffer in which the null
     * terminated string of the service names are placed */
    /* ATLEAST ONE OF THE @host AND @serv NAMES MUST BE REQUESTED THE OTHER
     * POINTER COULD BE NULL */ 
    /* NI_NAMEREQD, if set then, an error is returned if the hostname cannot
     * be determined */   
    getnameinfo(addr, salen, hostname, sizeof(hostname), NULL, 0, NI_NAMEREQD);


    /* Get the address 
     * This may seem silly but it seems to be needed on some systems 
     */
    /* @sck, a file descriptor of the opened socket */ 
    /* @SIOCGIFADDR, Get the hardware address of the device, the IP4/6 address
     * is already present in the item(struct ifreq*)*/
    /* @item, struct ifreq* has the address of one the struct ifreq* pointers returned */ 
    if(ioctl(sck, SIOCGIFADDR, item) < 0) {
      fatal_perror("ioctl(OSIOCGIFADDR)");
    }
    printf("%s %s",
           item->ifr_name,
           get_ip_str(addr, ip, INET6_ADDRSTRLEN));
    
    /* Lots of different ways to get the ethernet address */
#ifdef SIOCGIFHWADDR
    /* Linux */
    /* Get the MAC address */
    if(ioctl(sck, SIOCGIFHWADDR, item) < 0) {
      fatal_perror("ioctl(SIOCGIFHWADDR)");
      return 1;
    }
    
    /* display result */
    printf(" %02x:%02x:%02x:%02x:%02x:%02x",
           (unsigned char)item->ifr_hwaddr.sa_data[0],
           (unsigned char)item->ifr_hwaddr.sa_data[1],
           (unsigned char)item->ifr_hwaddr.sa_data[2],
           (unsigned char)item->ifr_hwaddr.sa_data[3],
           (unsigned char)item->ifr_hwaddr.sa_data[4],
           (unsigned char)item->ifr_hwaddr.sa_data[5]);
    
#elif SIOCGENADDR
    /* Solaris and possibly all SysVR4 */
    /* Get the MAC address */
    if(ioctl(sck, SIOCGENADDR, item) < 0) {
      fatal_perror("ioctl(SIOCGENADDR)");
    }
    
    /* display result */
    printf(" %02x:%02x:%02x:%02x:%02x:%02x",
           (unsigned char)item->ifr_enaddr[0],
           (unsigned char)item->ifr_enaddr[1],
           (unsigned char)item->ifr_enaddr[2],
           (unsigned char)item->ifr_enaddr[3],
           (unsigned char)item->ifr_enaddr[4],
           (unsigned char)item->ifr_enaddr[5]);
    
#elif __MACH__ || __NetBSD__ || __OpenBSD__ || __FreeBSD__
    /* MacOS X and all modern BSD implementations (I hope) */
    int                mib[6] = {0};
    int                len = 0;
    char               *macbuf; 
    struct if_msghdr   *ifm;
    struct sockaddr_dl *sdl;
    unsigned char      ptr[];
      
    mib[0] = CTL_NET;
    mib[1] = AF_ROUTE;
    mib[2] = 0;
    mib[3] = AF_LINK;
    mib[4] = NET_RT_IFLIST;
    mib[5] = if_nametoindex(item->ifr_name);
    if(mib[5] == 0)
      continue;

    if(sysctl(mib, 6, NULL, (size_t*)&len, NULL, 0) != 0) {
      fatal_perror("sysctl");
    }

    macbuf = (char *) malloc(len);
    if(macbuf == NULL) {
      fprintf(stderr, "\nUnable to allocate necessary memory: %d\n", len);
      exit(1);
    }

    if(sysctl(mib, 6, macbuf, (size_t*)&len, NULL, 0) != 0) {
      fatal_perror("sysctl");
    }

    ifm = (struct if_msghdr *)macbuf;
    sdl = (struct sockaddr_dl *)(ifm + 1);
    ptr = (unsigned char *)LLADDR(sdl);

    printf(" %02x:%02x:%02x:%02x:%02x:%02x", 
           ptr[0], ptr[1], ptr[2], 
           ptr[3], ptr[4], ptr[5]);

    free(macbuf);
      
#else
#error OS Distribution Not Recognized
#endif

    printf(" %s\n", hostname);

  }
 
  return 0;
}

